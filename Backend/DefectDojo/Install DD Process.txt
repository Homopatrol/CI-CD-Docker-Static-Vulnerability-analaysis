


PS C:\Users\cscuser> crc setup
INFO Checking if current user is in Hyper-V Admins group
INFO Checking if CRC bundle is extracted in '$HOME/.crc'
INFO Checking if C:\Program Files\CodeReady Containers\crc_hyperv_4.8.12.crcbundle exists
INFO Extracting bundle from the CRC executable
INFO Ensuring directory C:\Program Files\CodeReady Containers exists
INFO Uncompressing crc_hyperv_4.8.12.crcbundle
crc.vhdx: 13.24 GiB / 13.24 GiB [-----------------------------------------------------------------------------] 100.00%
oc.exe: 96.72 MiB / 96.72 MiB [-------------------------------------------------------------------------------] 100.00%
Your system is correctly setup for using CodeReady Containers, you can now run 'crc start' to start the OpenShift cluster
PS C:\Users\cscuser> crc start
INFO Checking if running in a shell with administrator rights
INFO Checking Windows 10 release
INFO Checking Windows edition
INFO Checking if Hyper-V is installed and operational
INFO Checking if crc-users group exists
INFO Checking if current user is in Hyper-V Admins group
INFO Checking if Hyper-V service is enabled
INFO Checking if the Hyper-V virtual switch exists
INFO Found Virtual Switch to use: Default Switch
INFO Checking if vsock is correctly configured
CodeReady Containers requires a pull secret to download content from Red Hat.
You can copy it from the Pull Secret section of https://cloud.redhat.com/openshift/create/local.
? Please enter the pull secret *****************************************************************************************INFO Loading bundle: crc_hyperv_4.8.12...
INFO Creating CodeReady Containers VM for OpenShift 4.8.12...
INFO Generating new SSH Key pair...
INFO Generating new password for the kubeadmin user
INFO Starting CodeReady Containers VM for OpenShift 4.8.12...
INFO CodeReady Containers instance is running with IP 127.0.0.1
INFO CodeReady Containers VM is running
INFO Updating authorized keys...
INFO Check internal and public DNS query...
INFO Check DNS query from host...
WARN Failed to query DNS from host: lookup foo.apps-crc.testing: no such host
INFO Verifying validity of the kubelet certificates...
INFO Starting OpenShift kubelet service
INFO Waiting for kube-apiserver availability... [takes around 2min]
INFO Adding user's pull secret to the cluster...
INFO Updating SSH key to machine config resource...
INFO Waiting for user's pull secret part of instance disk...
INFO Changing the password for the kubeadmin user
INFO Updating cluster ID...
INFO Updating root CA cert to admin-kubeconfig-client-ca configmap...
INFO Starting OpenShift cluster... [waiting for the cluster to stabilize]
INFO Operator openshift-controller-manager is progressing
INFO 2 operators are progressing: kube-apiserver, openshift-controller-manager
INFO 2 operators are progressing: authentication, kube-apiserver
INFO Operator kube-apiserver is progressing
INFO Operator kube-apiserver is progressing
INFO Operator kube-apiserver is progressing
INFO Operator kube-apiserver is progressing
INFO Operator authentication is degraded
INFO All operators are available. Ensuring stability...
INFO Operators are stable (2/3)...
INFO Operators are stable (3/3)...
INFO Adding crc-admin and crc-developer contexts to kubeconfig...
Started the OpenShift cluster.

The server is accessible via web console at:
  https://console-openshift-console.apps-crc.testing




Getting defectdojo working 
	Copy helm template
	Add dependencies helm repo add bitnami https://charts.bitnami.com/bitnami
	Run  helm dependencies update

C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart> helm repo add bitnami https://charts.bitnami.com/bitnami
"bitnami" has been added to your repositories

PS C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart>  helm repo add stable https://charts.helm.sh/stable
"stable" has been added to your repositories
PS C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart> helm dependencies update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "stable" chart repository
...Successfully got an update from the "bitnami" chart repository
Update Complete. ⎈Happy Helming!⎈
Saving 4 charts
Downloading mysql from repo https://charts.helm.sh/stable
Downloading postgresql from repo https://charts.bitnami.com/bitnami
Downloading rabbitmq from repo https://charts.bitnami.com/bitnami
Downloading redis from repo https://charts.bitnami.com/bitnami
Deleting outdated charts
PS C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart> ls


    Directory: C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        04/10/2021     15:06                charts
d-----        04/10/2021     14:45                templates
-a----        04/10/2021     14:45            364 .helmignore
-a----        04/10/2021     14:45            321 Chart.yaml
-a----        04/10/2021     14:30              2 README.md
-a----        04/10/2021     14:45            483 requirements.lock
-a----        04/10/2021     14:45            412 requirements.yaml
-a----        04/10/2021     14:45           9369 values.yaml


PS C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart> ls .\charts\            

    Directory: C:\Users\Pandora\Documents\GitHub\secure-Docker-dev-CI-CD-pipeline\Backend\DefectDojo\chart\charts


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        04/10/2021     15:06          11589 mysql-1.6.9.tgz
-a----        04/10/2021     15:06          48212 postgresql-10.3.5.tgz
-a----        04/10/2021     15:06          48790 rabbitmq-8.7.0.tgz
-a----        04/10/2021     15:06          64834 redis-12.0.0.tgz

=====================================================================================================================================================

helm install test-dd ./
NAME: test-dd
LAST DEPLOYED: Tue Oct  5 17:01:00 2021
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
DefectDojo has been installed.

To use it, go to <https://defectdojo.default.minikube.local>.

Log in with username admin.
To find out the password, run the following command:

    echo "DefectDojo admin password: $(kubectl \
      get secret test-dd-defectdojo \
      --namespace=default \
      --output jsonpath='{.data.DD_ADMIN_PASSWORD}' \
      | base64 --decode)"


 kubectl get pods
NAME                                                READY   STATUS    RESTARTS   AGE
test-dd-defectdojo-celery-beat-8489f695bb-mm95l     1/1     Running   0          3m23s
test-dd-defectdojo-celery-worker-7dd4d85bcb-lh8jt   1/1     Running   0          3m23s
test-dd-defectdojo-django-6c96db86b5-9bkr5          1/2     Running   0          3m23s
test-dd-initializer-2021-10-05-17-01-lpzbj          1/1     Running   0          3m23s
test-dd-postgresql-0                                1/1     Running   0          3m23s
test-dd-rabbitmq-0                                  0/1     Running   0          3m23s

crc oc-env | Invoke-Expression

PS C:\Users\cscuser> oc get secrets
NAME                                 TYPE                                  DATA   AGE
builder-dockercfg-qvr2f              kubernetes.io/dockercfg               1      19d
builder-dockercfg-tz4t9              kubernetes.io/dockercfg               1      19d
builder-token-2j22f                  kubernetes.io/service-account-token   4      19d
builder-token-gxkds                  kubernetes.io/service-account-token   4      19d
default-dockercfg-8t24g              kubernetes.io/dockercfg               1      19d
default-token-78vjs                  kubernetes.io/service-account-token   4      19d
default-token-h466k                  kubernetes.io/service-account-token   4      19d
defectdojo-postgresql-specific       Opaque                                2      3m56s
defectdojo-rabbitmq-specific         Opaque                                2      3m56s
deployer-dockercfg-bh82h             kubernetes.io/dockercfg               1      19d
deployer-token-rnqdf                 kubernetes.io/service-account-token   4      19d
deployer-token-z7j82                 kubernetes.io/service-account-token   4      19d
sh.helm.release.v1.test-dd.v1        helm.sh/release.v1                    1      3m56s
test-dd-defectdojo                   Opaque                                4      3m56s
test-dd-defectdojo-dockercfg-b85zl   kubernetes.io/dockercfg               1      3m56s
test-dd-defectdojo-token-km45z       kubernetes.io/service-account-token   4      3m56s
test-dd-defectdojo-token-zl6kb       kubernetes.io/service-account-token   4      3m56s
test-dd-postgresql-dockercfg-9rbzq   kubernetes.io/dockercfg               1      3m56s
test-dd-postgresql-token-hlbtb       kubernetes.io/service-account-token   4      3m56s
test-dd-postgresql-token-xqbh2       kubernetes.io/service-account-token   4      3m56s
test-dd-rabbitmq-dockercfg-jwxtw     kubernetes.io/dockercfg               1      3m56s
test-dd-rabbitmq-token-5qsk9         kubernetes.io/service-account-token   4      3m56s
test-dd-rabbitmq-token-lss8l         kubernetes.io/service-account-token   4      3m56s

PS C:\Users\cscuser\Downloads\spam\etc\Backend\DefectDojo\chart> oc port-forward svc/test-dd-defectdojo-django 8080:80
Forwarding from 127.0.0.1:8080 -> 8080
Forwarding from [::1]:8080 -> 8080
Handling connection for 8080
Handling connection for 8080
Handling connection for 8080
Handling connection for 8080
Handling connection for 8080
Handling connection for 8080
Handling connection for 8080



